"""
Django settings for Aidendo project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path
from urllib import parse
import environ

from . import constants

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialise environment variables
env = environ.Env()
environ.Env.read_env(os.path.join(f"{BASE_DIR}/Aidendo", ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--!=nq8f*^n7(zmfevmk73)@27#!4slp8-=_$6&9#xft$q(d(ec'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

ENV = env("ENV")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Aidendo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Aidendo.wsgi.application'

REST_FRAMEWORK = {
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "EXCEPTION_HANDLER": "tj_packages.exception_handler.custom_exception_handler", # noqa
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    'COERCE_DECIMAL_TO_STRING': False
}
CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_CREDENTIALS = True

CORS_ORIGIN_WHITELIST = [
    "http://localhost:8100",
    "http://localhost",
    "https://localhost:8100",
    "https://localhost",
]
# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "token",
    "platform",
    "version",
    "Access-Control-Allow-Origin",
]

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": env("DATABASE_NAME"),
        "USER": env("DATABASE_USER"),
        "PASSWORD": env("DATABASE_PASS"),
        "HOST": env("DATABASE_HOST"),
        "PORT": 5432,
    }
}

BASE_URL = constants.BASE_URL[ENV]

AWS_STORAGE_BUCKET_NAME = constants.AWS_STORAGE_BUCKET_NAME[ENV]


# AWS CREDENTIALS
AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY")
AWS_REGION = constants.AWS_REGION
AWS_S3_REGION_NAME = constants.AWS_S3_REGION_NAME
AWS_QUERYSTRING_EXPIRE = constants.AWS_QUERYSTRING_EXPIRE


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

#DATABASES = {
 #   'default': {
  #      'ENGINE': 'django.db.backends.sqlite3',
   #     'NAME': BASE_DIR / 'db.sqlite3',
    #}
#}

# Celery settings
CELERY_BROKER_URL = "sqs://{0}:{1}@".format(
        parse.quote(AWS_ACCESS_KEY_ID, safe=""),
        parse.quote(AWS_SECRET_ACCESS_KEY, safe="")
    ),

CELERY_ACCEPT_CONTENT = constants.CELERY_ACCEPT_CONTENT
CELERY_RESULT_BACKEND = constants.CELERY_RESULT_BACKEND

CELERY_BROKER_TRANSPORT_OPTIONS = constants.CELERY_BROKER_TRANSPORT_OPTIONS[ENV] # noqa

# AWS S3 CONFIGURATIONS
AWS_PUBLIC_MEDIA_LOCATION = constants.AWS_PUBLIC_MEDIA_LOCATION
DEFAULT_FILE_STORAGE = constants.DEFAULT_FILE_STORAGE

AWS_PRIVATE_MEDIA_LOCATION = constants.AWS_PRIVATE_MEDIA_LOCATION
PRIVATE_FILE_STORAGE = constants.PRIVATE_FILE_STORAGE

AWS_DEFAULT_ACL = constants.AWS_DEFAULT_ACL
# END

# S3 Bucket Details
AWS_STORAGE_BUCKET_NAME = constants.AWS_STORAGE_BUCKET_NAME[ENV]
AWS_S3_CUSTOM_DOMAIN = constants.AWS_S3_CUSTOM_DOMAIN[ENV]
AWS_PUBLIC_URL = constants.AWS_PUBLIC_URL[ENV]


if ENV == "DEV" or ENV == "STG":
    STATICFILES_STORAGE = "tj_packages.s3_storage.StaticStorage"
    AWS_STATIC_LOCATION = "static"
    STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, AWS_STATIC_LOCATION)

if ENV == "LOCAL":
    STATIC_URL = "/static/"
# End

if ENV == 'LOCAL' or ENV == 'DEV':
    INTERNAL_IPS = (
        '127.0.0.1', 'localhost')
        #'https://dev-myvidrivals.myvidhire.com', '18.217.53.197')
    MIDDLEWARE += (
       'debug_toolbar.middleware.DebugToolbarMiddleware',
    )

    INSTALLED_APPS += (
        'debug_toolbar',
    )

    DEBUG_TOOLBAR_PANELS = [
        'ddt_request_history.panels.request_history.RequestHistoryPanel',
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.logging.LoggingPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
    ]

    def show_toolbar(request):
        return True

    DEBUG_TOOLBAR_CONFIG = {
        'INTERCEPT_REDIRECTS': False,
        "SHOW_TOOLBAR_CALLBACK": show_toolbar
    }
    
# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRONJOBS = [
    (
        '* * * * *',
        'admin_portal.cron_jobs.events_start',
    ),
]

AUTHORIZATION_TOKEN = env("AUTHORIZATION_TOKEN")
